/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */
CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16 (a=instruction, b=aluout, sel=instruction[15], out=out0);

    // A-register control_bit
    Mux (a=true, b=instruction[5], sel=instruction[15], out=cb0);
    // A-register
    ARegister (in=out0, load=cb0, out=aout, out[0..14]=addressM);

    // A or M
    Mux16 (a=aout, b=inM, sel=instruction[12], out=out2);

    ALU (x=dout, y=out2, zx=instruction[11], nx=instruction[10], 
         zy=instruction[9], ny=instruction[8], f=instruction[7], 
         no=instruction[6], out=aluout, out=outM, zr=zrout, ng=ngout);

    // D-register control_bit
    Mux (a=false, b=instruction[4], sel=instruction[15], out=cb1);
    // D-register
    DRegister (in=aluout, load=cb1, out=dout);

    // writeM
    Mux (a=false, b=instruction[3], sel=instruction[15], out=writeM);

    // Program Counter
    Mux4Way (a=instruction[0], b=instruction[1], c=instruction[2], 
             d=false, sel[1]=ngout, sel[0]=zrout, out=jload);

    // load will be set to 1 according to the jump bits in the c_instruction
    // if i_bit is 0 then false, if 1 use jload
    Mux (a=false, b=jload, sel=instruction[15], out=loadf);
    PC (in=aout, load=loadf, inc=true, reset=reset, out[0..14]=pc);
}
