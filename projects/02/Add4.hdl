CHIP Add4 {
    IN a[4], b[4], cin;
    OUT sum[4], cout;

    PARTS:
    // P & G block
    HalfAdder (a=a[0], b=b[0], sum=p0, carry=g0);
    HalfAdder (a=a[1], b=b[1], sum=p1, carry=g1);
    HalfAdder (a=a[2], b=b[2], sum=p2, carry=g2);
    HalfAdder (a=a[3], b=b[3], sum=p3, carry=g3);

    // CLA block
    // C1
    And (a=cin, b=p0, out=c0Andp0);
    Or (a=g0, b=c0Andp0, out=c1);

    // C2
    And (a=g0, b=p1, out=g0Andp1);
    And (a=c0Andp0, b=p1, out=c0Andp0Andp1);
    Or (a=g1,b=g0Andp1,out=g1Org0Andp1);
    Or (a=g1Org0Andp1, b=c0Andp0Andp1, out=c2);

    // C3
    And (a=g1, b=p2, out=g1Andp2);
    And (a=g0Andp1, b=p2, out=g0Andp1Andp2);
    And (a=c0Andp0Andp1, b=p2, out=c0Andp0Andp1Andp2);
    Or (a=g2, b=g1Andp2, out=c3f);
    Or (a=g0Andp1Andp2, b=c0Andp0Andp1Andp2, out=c3l);
    Or (a=c3f, b=c3l, out=c3);

    // C4
    And (a=g2, b=p3, out=g2Andp3);
    And (a=g1Andp2, b=p3, out=g1Andp2Andp3);
    And (a=g0Andp1Andp2, b=p3, out=g0Andp1Andp2Andp3);
    And (a=c0Andp0Andp1Andp2, b=p3, out=c0Andp0Andp1Andp2Andp3);
    Or (a=g3, b=g2Andp3, out=c4f);
    Or (a=g1Andp2Andp3, b=g0Andp1Andp2Andp3, out=c4s);
    Or (a=c4f, b=c4s, out=c4l);
    Or (a=c4l, b=c0Andp0Andp1Andp2Andp3, out=cout);

    // Adders block
    Xor (a=cin, b=p0, out=sum[0]);
    Xor (a=c1, b=p1, out=sum[1]);
    Xor (a=c2, b=p2, out=sum[2]);
    Xor (a=c3, b=p3, out=sum[3]);
}
